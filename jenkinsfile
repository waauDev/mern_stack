pipeline {
    agent any
    
    tools {
        nodejs 'node18'
    }
    
    environment {
		DOCKER_HUB_CREDENTIALS_ID = 'jen-dockerhub'
		DOCKER_HUB_REPO_FRONT = 'mineacuna/mern_stack-frontend'
        DOCKER_HUB_REPO_BACK = 'mineacuna/mern_stack-backend'
	}
    options {
        timeout(time: 10, unit: 'MINUTES')
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Descargando código del repositorio...'
                git branch: 'main', 
                    url: 'https://github.com/waauDev/mern_stack.git'
                
                echo 'Código descargado. Verificando estructura:'
                bat 'dir'
            }
        }

        stage('Instala depedencias backend') {
            steps {
                echo 'Instalando dependencias del backend (src)...'
                bat 'cd src && npm i'
            }
        }

         stage('test de backend') {
            steps {
                echo 'Haciendo test de backend'
                bat 'cd src && npm test'
            }
        }

        
        stage('Instalar  Dependencias cliente') {
            steps {
                echo 'Instalando dependencias del frontend (client)...'
                bat 'cd client && npm i'
            }
        }

         stage('test de frontend') {
            steps {
                echo 'test frontend'
                bat 'cd client && npm test'
            }
        }

        stage('Build Docker Imagen de backend'){
			steps {
				script {
					dockerImageBack = docker.build("${DOCKER_HUB_REPO_BACK}:latest", "src")

				}
			}
		}

        stage('Build Docker Imagen de frontend'){
			steps {
				script {
					 dockerImageFront = docker.build("${DOCKER_HUB_REPO_FRONT}:latest", "client")

				}
			}
		}
        stage('Push backend a DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_HUB_CREDENTIALS_ID}") {
                        dockerImageBack.push('latest')
                    }
                }
            }
        }
        stage('Push frontend a DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_HUB_CREDENTIALS_ID}") {
                        dockerImageFront.push('latest')
                    }
                }
            }
        }

       

         
    }
    post {
		success {
			echo 'Build&Deploy completado correctamente!'
		}
		failure {
			echo 'Build&Deploy failed. Check logs.'
		}
	}
}